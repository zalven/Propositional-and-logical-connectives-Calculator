{"version":3,"sources":["Components/SolvingLogicMath.js","Components/Information.js","Components/MainMaths.js","App.js","serviceWorker.js","index.js"],"names":["SolvingLogicMath","props","state","formula","isClicked","table","val","i","length","test","charAt","this","isOperator","slice","string","values","findAllVariables","x","answer","Math","pow","stored","j","push","Boolean","toUpperCase","replace","split","filter","v","a","indexOf","expressionTree","BinaryExpressionTree","list_eval","list_getResult","creatingTruthTable","finilizedTable","expTree","expressionTable","ifExpressionHasVariable","ifExpressionHasOperatorAtEnd","ifExpressionHasOperator","concat","err","obj","distribution","keys","replaceAll","eval","_parenthesisIsLegal","substring","form","c","match","parenthesisIsLegal","variablesLegal","checkingFormulaIfLegal","theTable","setState","problemSolving","className","map","data","key","value","index","Component","Node","left","right","root","result","solves","_prints","console","log","removeEndParenthesis","parenthesis","len","zeroes","minValue","chr","precedent","_solves","outerParenthesisRemover","findLowestValue","_list_eval","_eval","Information","event","closeInfo","onClick","closeComponent","bind","colSpan","href","target","MainMaths","enteredFormula","textIndex","onInformationClick","onEnter","setOnInformationClick","type","placeholder","onChange","e","inputClicks","getMousIndex","id","name","buttonClicks","onMouseDown","onMouseUp","setEnteredFormula","clearForm","toLowerCase","preventDefault","selectionStart","App","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b4105906.chunk.js","sourcesContent":["import React,{Component} from 'react'\r\nimport '../styles/TableStyle.css'\r\nexport default class SolvingLogicMath extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            formula: props.formula ,\r\n            isClicked:props.isClicked,\r\n            table:[],\r\n        }\r\n    }\r\n    \r\n    isOperator(val\r\n        ){\r\n        return val === '¬' || val === '∧' ||  val === '∨' || val === '→' || val === '↔' || val === '⊕';\r\n    }\r\n    ifExpressionHasVariable(formula){\r\n        for(let i = 0 ; i < formula.length ; i++ )\r\n            if(/^[A-Za-z]{1,1}$/.test(formula.charAt(i) ) )\r\n                return true;\r\n        return false;\r\n    }\r\n    ifExpressionHasOperatorAtEnd(formula){\r\n        // If it has operator in front \r\n        if( this.isOperator (formula.charAt(0)) && formula.charAt(0) != '¬' )\r\n            return true;\r\n        // if it has operator in back \r\n        if( this.isOperator (formula.slice(-1)) )\r\n            return true;\r\n        return false;\r\n    }\r\n    ifExpressionHasOperator(formula){\r\n        for(let i = 0 ; i < formula.length ; i++ )\r\n            if( this.isOperator(formula.charAt(i) ) )\r\n                return true;\r\n        return false;\r\n    }\r\n    // Creates a truth table for variables \r\n    creatingTruthTable(string){\r\n        var values = this.findAllVariables(string)\r\n        if(values.length <= 0)return [];\r\n        let x = values.length\r\n        let answer = [values] \r\n        for(let i = 0 ; i < Math.pow(2,x) ; i++){\r\n            let stored = [] ; \r\n            for(let j = 0 ; j < x ; j++)\r\n                stored.push( Boolean(1<<(x-1)-j&i)+0 )\r\n            answer.push(stored)\r\n        }\r\n        return answer;\r\n    }\r\n    // Finds all distinct character from a given string [array] \r\n    findAllVariables(string){\r\n        return  string.toUpperCase().replace(/[^a-z]/gi, '') .split('').filter((v, i, a) => a.indexOf(v) === i) ;\r\n    }\r\n    expressionTable(formula){\r\n        let expressionTree = new BinaryExpressionTree(formula);\r\n        expressionTree.list_eval()\r\n        return expressionTree .list_getResult()\r\n    }\r\n    \r\n    table(formula){\r\n        let table = this.creatingTruthTable(formula);\r\n        try{\r\n            let finilizedTable = [];\r\n            let expTree = this.expressionTable(formula);\r\n            // table[0] = table[0].concat( this.expressionTable(formula))\r\n            for(let i = 0 ; i < expTree.length ; i++)\r\n                // Need to be legal  \r\n                // Check if the given formulae has variable in it \r\n                // Check if it doesn't have an operator in the end of it \r\n                // Check if it has operator in it \r\n                if( this.ifExpressionHasVariable(expTree[i]) && !this.ifExpressionHasOperatorAtEnd(expTree[i])\r\n                    && this. ifExpressionHasOperator(expTree[i]) )\r\n                    finilizedTable.push( expTree[i] );\r\n            finilizedTable = finilizedTable.filter((v, i, a) => a.indexOf(v) == i); \r\n            table[0] = table[0].concat(finilizedTable)\r\n            // Create table based on how long table 0 is \r\n            for(let i = 1 ; i < table.length ; i++)\r\n                table[i] = table[i].concat( finilizedTable );\r\n        }catch(err){}\r\n        for(let i = 1 ; i < table.length ; i++){\r\n            let obj = {}\r\n            // Loop through Expression Except the first table \r\n            for( let j = 0 ; j < table[0].length ; j++ ){\r\n                // Check if its only 1 character \r\n                if(table[0][j].length <= 1){\r\n                    obj[table[0][j]] =  table[i][j] \r\n                }else{\r\n                    let distribution = table[0][j] ;\r\n                    for(let keys in obj)  distribution = distribution.replaceAll(keys,obj[keys]);\r\n                    table[i][j] = new BinaryExpressionTree(distribution).eval();\r\n                }\r\n            }   \r\n        }\r\n        return table\r\n    }\r\n    _parenthesisIsLegal(formula){\r\n        let j;\r\n        for(let i = 0 ; i < formula.length ; i++ ){\r\n            if(formula.charAt(i) == '(') j = i;\r\n            if(formula.charAt(i) == ')' && j != null)\r\n                return this._parenthesisIsLegal(formula.substring(0,j)+ formula.substring(i+1) );\r\n            }\r\n        return formula\r\n    }\r\n\r\n    parenthesisIsLegal(formula){\r\n        let form = '';\r\n        for(let i = 0 ; i < formula.length ; i ++)\r\n            if( formula.charAt(i) == '(' || formula.charAt(i) == ')' )\r\n                form += formula.charAt(i);\r\n        return this._parenthesisIsLegal(form) == '';\r\n    }\r\n    // If not a letter and an operator \r\n    variablesLegal(formula){\r\n        for(let i = 0 ; i<formula.length ; i++) {\r\n            let c = formula.charAt(i);\r\n            // console.log( c+\"  =  \"+ !(c.match(/[a-z]/i) != null)  )\r\n            if( !(c === '(' || c === ')')  && !(c.match(/[a-z]/i) != null)  && !this.isOperator(c)) return false;\r\n            \r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    checkingFormulaIfLegal(formula){\r\n        // Check if the table is legal ( parenthesis / legal variables / legal operators / legal formula )\r\n        if(this.parenthesisIsLegal(formula) == false)return false;\r\n        if(this.variablesLegal(formula) == false)return false;\r\n        return true;\r\n    }\r\n\r\n    // Test Cases \r\n    //  o+(c-(a+b)-d)+(m+(i+(e+f)+(g+h)+j)+(k+L)+n)+p\r\n    // (p→(a∧r))∧(¬p→(¬a∧¬r))\r\n    // ¬p∧r∨z→¬x\r\n    // (p→(¬a∧r))∧(¬¬¬¬¬¬p→(¬a∧¬r))⊕¬p→(¬a∧¬r)\r\n    // (p∧¬q)∨¬p\r\n    // \r\n    problemSolving(formula){\r\n        formula = formula.replace(/ /g,'').toUpperCase();\r\n        if(this.checkingFormulaIfLegal(formula) == true ){\r\n            let theTable  = this.table(formula);\r\n            this.setState({table:theTable})\r\n         }\r\n    }\r\n\r\n    // Updates the current state everytime the props updates\r\n    componentWillReceiveProps(props){\r\n        this.setState({formula:props.formula,isClicked:props.isClicked}) \r\n        this.problemSolving(props.formula)  \r\n       \r\n    }\r\n    //(p→(¬a∧r))∧(¬¬¬¬¬¬p→(¬a∧¬r))⊕¬p→(¬a∧¬r)\r\n\r\n    render(){\r\n     \r\n        return(\r\n            <div className = \"table-container\">\r\n                <p className = 'given-formula'>Formula : {this.state.formula} </p>\r\n                <table className = \"table-body\">\r\n                {\r\n                    this.state.table.map(function(data, i){\r\n                        return (\r\n                            <tbody key = {i}>\r\n                            <tr key = {i}>{\r\n                                data.map(function(value, index){\r\n                                    if( value == 0 || value == 1)\r\n                                        return<td key= {index}>{value}</td>\r\n                                    else\r\n                                        return<th key= {index}>{value}</th>\r\n                                })\r\n                            }\r\n                            </tr>   \r\n                            </tbody>\r\n                        )\r\n                    })\r\n                }\r\n               </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n// ==========================================================================\r\n// EXPRESSION TREE\r\n\r\nclass Node{\r\n    constructor(value ){\r\n      this.value = value;\r\n      this.left =  null;\r\n      this.right = null;\r\n    }\r\n  }\r\n  \r\n  class BinaryExpressionTree{\r\n    prints(){\r\n        if(this.root != null)\r\n          this._prints(this.root);\r\n      }\r\n      _prints(root){\r\n        if(root != null){\r\n          console.log(root.value)\r\n          this._prints(root.left)\r\n          this._prints(root.right) \r\n        }\r\n    }\r\n    constructor(value){\r\n        this.root = null;\r\n        this.result = [];\r\n        this.solves(value)\r\n      \r\n    }\r\n    outerParenthesisRemover(value){\r\n        if( this.removeEndParenthesis(value) && value.length >= 2) \r\n            value =  value.substring(1,value.length-1) ;\r\n        return value;\r\n    }\r\n    removeEndParenthesis(value){\r\n        let index = 0, parenthesis = 0 , len = value.length , zeroes =0;\r\n        while(index < len){\r\n            let val = value.charAt(index++);\r\n            if(val == '(')parenthesis ++;\r\n            if(val == ')') parenthesis--;\r\n            if(parenthesis == 0 &&  val == ')') zeroes++;\r\n            if(zeroes >=2) return false;\r\n        }\r\n        return zeroes == 1 && value.slice(-1) == ')' && value.charAt(0) == '(';\r\n    }\r\n    // val == '¬' || \r\n    isOperator(val){\r\n        return val === '∧' || val === '∨' || val === '→' || val === '↔' || val ===   '⊕';\r\n    }\r\n    // val == '¬' ||\r\n    precedent(value){\r\n        // if(value === '¬')\r\n        //     return -1;\r\n        return 1 \r\n    }\r\n    findLowestValue(value){\r\n        let result = 0,index = 0 , minValue = 5 , len = value.length, parenthesis = 0;\r\n        for(index = 0 ; index < len; index++){\r\n            let chr = value.charAt(index);\r\n            if(chr == '(')parenthesis++;\r\n            if(chr == ')')parenthesis--;\r\n            if( parenthesis == 0){\r\n                if( this.precedent(chr) <= minValue && this.isOperator(chr) ){\r\n                    minValue = this.precedent(chr) ;\r\n                    result = index;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    solves(value){\r\n      this.root = this._solves(this.root, value);\r\n      return this.root;\r\n    }\r\n    //(p∧¬q)∨¬p\r\n    _solves(root,value){\r\n        if(value !== \"\"){ \r\n            value = this.outerParenthesisRemover(value)\r\n            let index = this.findLowestValue(value);\r\n            root = new Node( value.charAt(index));\r\n            root.left = this._solves(root.left , value.substring(0,index))\r\n            root.right = this._solves(root.right, value.substring(index+1));\r\n        }\r\n        return root;\r\n    }\r\n    list_eval(){\r\n        return this._list_eval(this.root)\r\n    }\r\n\r\n       // Test Cases \r\n    //  o+(c-(a+b)-d)+(m+(i+(e+f)+(g+h)+j)+(k+L)+n)+p\r\n    // (p→(a∧r))∧(¬p→(¬a∧¬r))\r\n    // (p→(¬a∧r))∧(¬¬¬¬¬¬p→(¬a∧¬r))⊕¬p→(¬a∧¬r)\r\n    // (p∧¬q)∨¬p\r\n    _list_eval(root){\r\n        if(root != null){\r\n            if(root.left == null && root.right == null) \r\n                return root.value;\r\n            let left = this._list_eval(root.left)\r\n            let right = this._list_eval(root.right) \r\n            // console.log( left+\" - \"+root.value+\" - \" + right)\r\n            this.result.push(left+root.value+right )\r\n            if( left  != \"\" && right != \"\") \r\n                return \"(\"+left+root.value+right +\")\"\r\n            return left +root.value + right\r\n            }\r\n        return \"\"\r\n    }\r\n\r\n    \r\n    list_getResult(){\r\n        return this.result\r\n    }\r\n\r\n    eval(){\r\n        return this._eval(this.root)\r\n    }\r\n    // (p∧¬q)∨¬p\r\n    _eval(root){\r\n        if(root!= null){\r\n            if(root.left == null && root.right == null) return root.value;\r\n            let right = this._eval( root .right)\r\n            let left = this._eval(root.left);\r\n            console.log(\"------------------------------\")\r\n            console.log(left+\" - \"+root.value+\" - \"+right);\r\n            if(root.value === '∧')\r\n                return left == 1 && right == 1?1:0;\r\n            if(root.value === '∨')\r\n                return left  == 1 || right == 1 ?1:0;\r\n            if(root.value === '¬')\r\n                return right == 1?0:1 ;\r\n            if(root.value === '→')\r\n                return (left == 1 && right == 0)?0:1;\r\n            if(root.value === '⊕')\r\n                return left != right?1:0;\r\n            if(root.value === '↔')\r\n                return left == right?1:0;\r\n        }\r\n        return '';\r\n    }\r\n  }\r\n \r\n\r\n  ","import React,{Component} from 'react'\r\nexport default class Information extends Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    closeComponent(event){\r\n        this.props.closeInfo()\r\n    }\r\n    render(){\r\n\r\n        return( \r\n            <div className = \"information-body\">\r\n            <ul>\r\n            <h4 onClick = {this.closeComponent.bind(this)} className = {\"information-close\"}> X</h4>\r\n                <li>No numbers is allowed only letters (not case sensitive) and Logical operators </li>\r\n                <li>\r\n                    <table className = 'table-body-information'>\r\n                        <tr>\r\n                            <td colSpan = '2'> Logical operators can be replaced by the following </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>¬</td>\r\n                            <td>~ </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>∧</td>\r\n                            <td>&</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>∨</td>\r\n                            <td>v</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>→</td>\r\n                            <td>&gt;</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>⊕</td>\r\n                            <td>*</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>↔</td>\r\n                            <td>&lt;&gt;</td>\r\n                        </tr>\r\n                    </table>\r\n                </li>\r\n                <li>Input a valid formula or it will compute everything it sees fit </li>\r\n                <li> <a href = \"https://github.com/zalven/Propositional-and-logical-connectives-Calculator/tree/master\" target=\"_blank\"> Get source Code</a> </li>\r\n            </ul>\r\n        </div>\r\n        );\r\n    }\r\n}","import React,{Component} from 'react'\r\nimport '../styles/MainMaths.css'\r\nimport SolvingLogicMath from './SolvingLogicMath'\r\nimport Information from './Information'\r\nexport default class MainMaths extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            formula:\"\",\r\n            enteredFormula:\"\",\r\n            isClicked:false,\r\n            textIndex:0,\r\n            onInformationClick:false,\r\n            onEnter:false,\r\n        }\r\n        this.setOnInformationClick = this.setOnInformationClick.bind(this)\r\n    }\r\n    setOnInformationClick(){\r\n        this.setState({onInformationClick:this.state.onInformationClick==true?false:true })\r\n    }\r\n    render(){\r\n        return(\r\n            <div className = \"MainBody\">\r\n               {this.state.onInformationClick? <Information closeInfo = {this.setOnInformationClick} />:null}\r\n                <div className = \"button-operators\">\r\n                    <input type=\"text\" className =\"textbox-operator\"  placeholder= \"Enter logical formula\" onChange ={e => this.inputClicks(e)} value = {this.state.formula}  onClick = {this.getMousIndex.bind(this)} />\r\n                     <button id= {'info-button'} onClick = {this.setOnInformationClick} ></button><br/>\r\n                    <button name = \"¬\" onClick = {this.buttonClicks.bind(this)}> ¬ </button>\r\n                    <button name = \"∧\" onClick = {this.buttonClicks.bind(this)}> ∧ </button>\r\n                    <button name = \"∨\" onClick = {this.buttonClicks.bind(this)}> ∨ </button>\r\n                    <button name = \"⊕\" onClick = {this.buttonClicks.bind(this)}> ⊕ </button>\r\n                    <button name = \"→\" onClick = {this.buttonClicks.bind(this)}> → </button>\r\n                    <button name = \"↔\" onClick = {this.buttonClicks.bind(this)}> ↔ </button>\r\n                    <button name = \"(\" onClick = {this.buttonClicks.bind(this)}> ( </button>\r\n                    <button name = \")\" onClick = {this.buttonClicks.bind(this)}> ) </button><br/>\r\n                    <div className = \"button-variables\">\r\n                        <button name = \"p\" onClick = {this.buttonClicks.bind(this)}> p </button>\r\n                        <button name = \"q\" onClick = {this.buttonClicks.bind(this)}> q </button>\r\n                        <button name = \"x\" onClick = {this.buttonClicks.bind(this)}> x </button>\r\n                        <button name = \"y\" onClick = {this.buttonClicks.bind(this)}> y </button>\r\n                        <button name = \"z\" onClick = {this.buttonClicks.bind(this)}> z </button>\r\n                        <button name = \"a\" onClick = {this.buttonClicks.bind(this)}> a </button>\r\n                        <button name = \"b\" onClick = {this.buttonClicks.bind(this)}> b </button>\r\n                    </div>\r\n                    <div className = \"execute-button\">\r\n                        <button \r\n                            onMouseDown = {()=>this.setState({isClicked:true})}\r\n                            onMouseUp = {()=>this.setState({isClicked:false})} \r\n                            onClick = {this.setEnteredFormula.bind(this)}> Enter </button>\r\n                        <button onClick = {this.clearForm.bind(this)}> Reset </button>\r\n                    </div>\r\n                </div>\r\n                { this.state.onEnter? <SolvingLogicMath isClicked = {this.state.isClicked} formula = {this.state.enteredFormula}/>:null }\r\n                <p className = 'credits-owner'>Zalven Dayao - Descrete Math Logical calculator yr.2020</p> \r\n            </div>\r\n        )\r\n    }\r\n    // Guys may ginawa akung truth table calculator . If you want to use it . just visit the link .\r\n    // Meron din akung iba pang projects . follow nyo lng ako sa github  and if you want the source code .\r\n    // free lng naman .check nyo lng sa website meron doon]]],meron din sa aking github.\r\n    // Just let me know guys if may bug kayung nakita or mali yung sagot. Arigathanksssss  :D \r\n    // \r\n    /*\r\n                Test Cases \r\n        o+(c-(a+b)-d)+(m+(i+(e+f)+(g+h)+j)+(k+L)+n)+p\r\n        (p→(a∧r))∧(¬p→(¬a∧¬r))\r\n        ¬p∧r∨z→¬x\r\n        (p→(¬a∧r))∧(¬¬¬¬¬¬p→(¬a∧¬r))⊕¬p→(¬a∧¬r)\r\n        (p∧¬q)∨¬p\r\n        (p>(~a&r))&(~~~~~~p>(~a&~r))\r\n    */\r\n    setEnteredFormula(event){\r\n\r\n        let formula = this.state.formula.toLowerCase().replace(/ /g,'');\r\n        formula = formula.replaceAll( '~' , '¬')\r\n        formula = formula.replaceAll('&' , '∧')\r\n        formula = formula.replaceAll( 'v' , '∨');\r\n        formula = formula.replaceAll( '>' , '→');\r\n        formula = formula.replaceAll( '*' , '⊕');\r\n        formula = formula.replaceAll( '<>' , '↔');\r\n        event.preventDefault();\r\n        this.setState({  \r\n            onEnter:true,  \r\n            enteredFormula:formula   \r\n        }, () => console.log(this.state.onEnter+ \" \"+this.state.enteredFormula))\r\n          this.setState({ enteredFormula:formula  })\r\n    }\r\n    getMousIndex(event){\r\n        this.setState( { textIndex:event.target.selectionStart })\r\n    }\r\n    clearForm(event){\r\n        this.setState({  formula:\"\", enteredFormula:\"\",onEnter : false})\r\n    }\r\n    buttonClicks(event){\r\n        let index = this.state.textIndex;\r\n        this.setState({textIndex:index+1, formula: this.state.formula.substring(0,index) +event.target.name +this.state.formula.substring(index)    });\r\n    }\r\n    inputClicks(event){\r\n        this.setState({  formula: event.target.value });\r\n    }\r\n}","\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\n\nimport React from 'react';\nimport MainMaths from './Components/MainMaths';\n\n\n// IMPLEMENTED\n// LogcaL Conjuction and Disconjunctions / Logical operations \n// Davis Putnam Algorithm\n// CNF Formula \n// Quine-McCluskey Minimization Technique\n// Graphical expression tree (Binary Expression Trees) \n// Negation in BEXT\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        \n      <MainMaths/>\n    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}